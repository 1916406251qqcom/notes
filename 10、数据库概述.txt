1、DDL：数据定义语言；
	操作对象：数据库和表
	关键词：create、alter、drop
	
	操作数据库：
		创建：
			格式：create database 数据库名称;
		删除：
			格式：drop database 数据库名称;
		常用的命令：show databases;
	
	操作表：
		创建表：格式：create table 表名(字段描述)；
					字段描述：字段名称 字段类型 [约束]
					例如：create table user(
						id int primary key auto_increment,
						username varchar(20)
					);
		修改表：格式：alter table 表名 ...
						修改表名：alter table 旧表名 rename to 新表名;
						添加字段：alter table 表名 add [column] 字段描述;
							例如：alter table user add password varchar(20);
						修改字段名：alter table 表名 change 旧字段名称 新字段名称 新字段描述;
						修改字段描述：alter table 表名 modify 字段名称 字段类型 [约束];
						删除字段：alter table 表名 drop 字段名称;
		删除表：格式：drop table 表名;
		常用命令：	切换或者进入数据库：use 数据库名称;
					查看当前数据库下的所有表：show tables;
					查看表结构：desc 表名;
					查看建表语句：show create table 表名;
		
2、DML：数据操纵语言
	操作对象：记录
	关键词：insert update delete
	插入：	格式1：insert into 表名 values(字段值1,字段值2...);
				注意：	默认插入全部字段，
						必须保证values后面的内容的类型和顺序与表中的结构一致
						若字段类型为数字，可以省略引号
			格式2：insert into 表名(字段名1,字段名2...) values(字段值1,字段值2...);
				注意：	插入指定字段，
						必须保证values后面的内容的类型和顺序与表名后面的字段的类型和顺序保持一致
						若字段类型为数字，可以省略引号
	修改：格式：update 表名 set 字段名=字段值,字段名1=字段值1 [where 条件];
				例如：update user set username = 'jerry' where id = 10;
	删除：格式：delete from 表名 [where 条件];

3、DQL：数据查询语言（非官方）
	操作对象：记录
	关键词：select
	格式：select ... from 表名 where 条件 group by ----分组字段 having 条件 order by 排序字段 asc|desc;
		基础查询:	查看指定字段：select 字段名1,字段名2... from 表名;
					去重：select distinct 字段名1,字段名2... from 表名;
					可以在查询的结果上进行运算，这个运算不影响数据库中的值：select 字段名+10 from 表名;
					给字段起别名的格式：字段名 [as] 别名	select 字段名+10 as 新字段名 from 表名;
					
		基本条件查询：模糊匹配格式：字段名 like "匹配规则";
						匹配内容：	"龙"	值为龙
									"%龙"	值以龙结尾
									"龙%"	值以龙开头
									"%龙%"	值包含龙
						匹配个数："_"代表一个字符
					select * from 表名 where 字段名 in(字段值1, 字段值2...);
					select * from 表名 where 字段名 between 小值 and 大值;

		高级查询：	1)排序：select * from 表名 order by 字段名 asc|desc;(按字段名的值升序或降序排序)
							select * from 表名 where 字段名 like '%新%' order by 字段名 asc|desc;
					2)聚合函数：对一列值进行计算，返回值是一个，运算过程中会忽略null值
						select sum(字段名) from 表名;---求和
						select avg(字段名) from 表名;---平均值
						select round(avg(字段名), 2) from 表名;---平均值四舍五入，保留两位
						select count(*) from 表名;---求有多少条记录
					3)分组：使用group by
						1.根据cno字段分组，分组后统计商品的个数.
							select cno,count(*) from products group by cno;
						2.根据cno分组，分组统计每组商品的总数量，并且总数量> 200;
							select cno,sum(pnum) from products group by cno having sum(pnum) > 200;
						注意：	where是对分组前的数据进行过滤，having 是对分组后的数据进行过滤。
								where 后面不能使用聚合函数,having可以。
					
4、DCL：数据控制语言
	操作对象：用户、事务、权限

################################
数据类型：
java				mysql
byte				tinyint
short				smallint
int					int
long				bigint
char/String			varchar|char
						varchar:可变长度，只有mysql中有		例如：varchar(20),若存放abc,那只会占用三个
						char:固定长度	例如：char(20)，若存放abc,那只会占用20个，不足的地方用空格补齐
boolean				tinyint|int 代替
float|double		float|double
						注意：double(5,2):该小数长度为5个,小数占2个  最大值:999.99

java.sql.Date		date 日期
java.sql.Time		time 时间（时分秒）
java.sql.Timestamp	timestamp 时间戳 若给定值为null,数据库会把当前的系统时间存放到数据库中
					datetime 日期+时间

java.sql.Clob(长文本)	text 只有mysql中有,最大支持4G
java.sql.Blob(二进制)	blob

################################
约束:
	作用: 为了保证数据的有效性和完整性
	MySQL中常用的约束: 主键约束(primary key)  唯一约束(unique) 非空约束(not null) 外键约束(foreign key)

	主键约束(primary key): 被修饰过的字段唯一非空	注意:一张表只能有一个主键,这个主键可以包含多个字段
	
			方式1:建表的同时添加约束	格式: 字段名称 字段类型 primary key
			
			方式2:建表的同时在约束区域添加约束		注意：所有的字段声明完成之后,就是约束区域了
				格式: primary key(字段1,字段2)
				
				例如：	create table pk01(
							id int,
							username varchar(20),
							primary key (id)
						);
				
				insert into pk01 values(1,'tom');		-- 成功
				insert into pk01 values(1,'tom');		-- 失败 Duplicate entry '1' for key 'PRIMARY'
				insert into pk01 values(null,'tom');	-- 失败  Column 'id' cannot be null
				
				create table pk01(
					id int primary key,
					username varchar(20),
					primary key (id)
				);	-- 错误的，一张表只能有一个主键
			
			方式3:建表之后,通过修改表结构添加约束
				例如：	create table pk02(
							id int,
							username varchar(20)
						);
						alter table pk02 add primary key(id,username);	-- 联合主键
				
				insert into pk02 values(1,'tom');		-- 成功
				insert into pk02 values(1,'tomcat');	-- 成功
				insert into pk02 values(1,'tomcat');	-- 失败
		
	唯一约束(unique): 被修饰过的字段唯一,对null不起作用
		方式1:建表的同时添加约束 格式: 字段名称 字段类型 unique
			例如：	create table un(
						id int unique,
						username varchar(20) unique
					);
			
			insert into un value(10,'tom');-- 成功
			insert into un value(10,'jack');-- 错误 Duplicate entry '10' for key 'id'
			insert into un value(null,'jack');-- 成功
			insert into un value(null,'rose');-- 成功
			
		方式2: 建表的同时在约束区域添加约束 
			unique(字段1,字段值2...)
			
		方式3: 建表之后,通过修改表结构添加约束
			alter table 表名 add unique(字段1,字段2);	-- 添加的联合唯一
			alter table 表名 add unique(字段1);			-- 给一个添加唯一
			alter table 表名 add unique(字段2);			-- 给另一个添加唯一
			
			////////////////
				create table un01(
					id int,
					username varchar(20)
				); 
				alter table un01 add unique(id,username);
				insert into un01 values(1,'tom');-- 成功
				insert into un01 values(1,'jack');-- 成功
				insert into un01 values(1,'tom');-- 失败  Duplicate entry '1-tom' for key 'id'
			/////////////////////
			
	非空约束(not null): 被修饰过的字段非空
		例如：	create table nn(
					id int not null,
					username varchar(20) not null
				);
			
			insert into nn values(null,'tom');	-- 错误的 Column 'id' cannot be null

################################
truncate 清空表 ★
	格式: truncate 表名; 干掉表,重新创建一张空表
	truncate和delete from 区别:
			delete属于DML(数据操纵语言)语句，truncate属于DDL(数据定义语言)语句
			delete逐条删除，truncate干掉表,重新创建一张空表
		
auto_increment 自增
	要求:	1.被修饰的字段类型支持自增，一般int
			2.被修饰的字段必须是一个key，一般是primary key
	
	create table ai01(
		id varchar(10) auto_increment
	);-- 错误 	Incorrect column specifier for column 'id'
	
	create table ai01(
		id int auto_increment
	);-- 错误 	Incorrect table definition; 
				there can be only one auto column and it must be defined as a key
				
################################
创建多表,可以描述出表于表之间的关系
	为了保证数据的有效性和完整性，添加约束(外键约束)
	格式：alter table 多表名称 add foreign key(外键名称) references 一表名称(主键)
	
	添加了外键约束之后有如下特点：
	1）主表中不能删除从表中已引用的数据
	2）从表中不能添加主表中不存在的数据
	
	开发中处理一对多：
		在多表中添加一个外键,名称一般为主表的名称_id,字段类型一般和主表的主键的类型保持一致
		为了保证数据的有效性和完整性,在多表的外键上添加外键约束即可

	开发中处理多对多：
		引入一张中间表,存放两张表的主键,一般会将这两个字段设置为联合主键,这样就可以将多对多的关系拆分成两个一对多了
		
		为了保证数据的有效性和完整性，需要在加两个外键约束即可.

###############################
多表查询
	笛卡尔积：多张表无条件的联合查询，select a.*,b.* from a,b;
	
	内连接：
		格式1：显示的内连接，select a.*, b.* from a [inner] join b on a和b的连接条件;
		格式2：隐式的内连接，select a.*, b.* from a, b where a和b的连接条件;
		
		查询用户的订单,没有订单的用户不显示(数据见附录)
			隐式内连接:
				select user.*,orders.* from user ,orders where user.id=orders.user_id;
			显示内连接
				select user.*,orders.* from user join orders on user.id=orders.user_id;
				
	外连接：
		左外连接：先展示join左边的(a)表的所有数据，根据条件关联查询join右边的表(b)，符合条件则展示出来,				不符合以null值展示.
			select a.*, b.* from a left [outer] join b on 连接条件;
				
		右外查询：先展示jion右边的(a)表的所有数据，根据条件关联查询join左边的表(b)，符合条件则展示出来,				不符合以null值展示.
			select a.*, b.* from b right [outer] join a on 连接条件;
		
		例：查询所有用户的订单详情
			左外连接: user在左
				select user.*,orders.* from user left join orders on user.id=orders.user_id;
			右外连接：user在右
				select user.*,orders.* from orders right join user on user.id=orders.user_id;
				
	子查询：一个查询依赖另一个查询
		例：查看用户为张三的订单详情
				select * from orders where user_id = (select id from User where username = '张三');
				
			查询出订单的价格大于300的所有用户信息
				select * from user where id in(select user_id from orders where price >300);
				
			查询订单价格大于300的订单信息及相关用户的信息
				内连接:
					select orders.*,user.* from orders,user where user.id=orders.user_id and orders.price>300 ;
				子查询:	是将一个查询的结果作为一张临时表
					select user.*, tmp.* from user, (select * from orders where price>300) as tmp where user.id=tmp.user_id;
					
			给表起别名的格式: 表 [as] 别名
			
#####################################
附录
	-- 用户表(user) 
	   create table user(                                  
		  id int auto_increment primary key,                
		  username varchar(50)  -- 用户姓名                                                
		);

	-- 订单表(orders)
	   create table orders(                                                  
		  id int  auto_increment primary key,                                  
		  price double,                                           
		  user_id int                                       
		);
		
	-- 给订单表添加外键约束
		alter table orders add constraint user_fk foreign key (user_id) references user(id); 

	-- 向user表中添加数据
			insert into user values(3,'张三');
			insert into user values(4,'李四');
			insert into user values(5,'王五');
			insert into user values(6,'赵六');

	-- 向orders表中插入数据
			insert into orders values(1,1314,3);
			insert into orders values(2,1314,3);
			insert into orders values(3,15,4);
			insert into orders values(4,315,5);
			insert into orders values(5,1014,null);